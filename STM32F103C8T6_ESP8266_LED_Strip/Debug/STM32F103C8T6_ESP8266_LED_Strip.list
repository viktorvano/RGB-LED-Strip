
STM32F103C8T6_ESP8266_LED_Strip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003340  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003638  08003638  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08003638  08003638  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003638  08003638  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003638  08003638  00013638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800363c  0800363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08003640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008cc  200001dc  0800381c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa8  0800381c  00020aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c38d  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b26  00000000  00000000  0002c592  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf8  00000000  00000000  0002e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  0002ecb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e32  00000000  00000000  0002f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009813  00000000  00000000  00047602  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088f94  00000000  00000000  00050e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9da9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003350  00000000  00000000  000d9e24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003434 	.word	0x08003434

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08003434 	.word	0x08003434

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fd0a 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f840 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f988 	bl	800047c <MX_GPIO_Init>
  MX_TIM2_Init();
 800016c:	f000 f882 	bl	8000274 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f95a 	bl	8000428 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000174:	f000 f90a 	bl	800038c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000178:	2100      	movs	r1, #0
 800017a:	4815      	ldr	r0, [pc, #84]	; (80001d0 <main+0x74>)
 800017c:	f001 fd8c 	bl	8001c98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000180:	2104      	movs	r1, #4
 8000182:	4813      	ldr	r0, [pc, #76]	; (80001d0 <main+0x74>)
 8000184:	f001 fd88 	bl	8001c98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000188:	2108      	movs	r1, #8
 800018a:	4811      	ldr	r0, [pc, #68]	; (80001d0 <main+0x74>)
 800018c:	f001 fd84 	bl	8001c98 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000190:	4810      	ldr	r0, [pc, #64]	; (80001d4 <main+0x78>)
 8000192:	f001 fcd7 	bl	8001b44 <HAL_TIM_Base_Start_IT>
  ESP_Clear_Buffer();
 8000196:	f000 fa2d 	bl	80005f4 <ESP_Clear_Buffer>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800019a:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <main+0x7c>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	68da      	ldr	r2, [r3, #12]
 80001a0:	4b0d      	ldr	r3, [pc, #52]	; (80001d8 <main+0x7c>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	f042 0220 	orr.w	r2, r2, #32
 80001a8:	60da      	str	r2, [r3, #12]
  ESP_Server_Init();
 80001aa:	f000 f9d5 	bl	8000558 <ESP_Server_Init>
  enable_w = 1;
 80001ae:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <main+0x80>)
 80001b0:	2201      	movs	r2, #1
 80001b2:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(messageHandlerFlag)
 80001b4:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <main+0x84>)
 80001b6:	881b      	ldrh	r3, [r3, #0]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d004      	beq.n	80001c6 <main+0x6a>
	  {
		  messageHandlerFlag = 0;
 80001bc:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <main+0x84>)
 80001be:	2200      	movs	r2, #0
 80001c0:	801a      	strh	r2, [r3, #0]
		  messageHandler();
 80001c2:	f000 fa85 	bl	80006d0 <messageHandler>
	  }
	  watchdog = 0;
 80001c6:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <main+0x88>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	801a      	strh	r2, [r3, #0]
	  if(messageHandlerFlag)
 80001cc:	e7f2      	b.n	80001b4 <main+0x58>
 80001ce:	bf00      	nop
 80001d0:	20000a58 	.word	0x20000a58
 80001d4:	200001fc 	.word	0x200001fc
 80001d8:	20000244 	.word	0x20000244
 80001dc:	20000a54 	.word	0x20000a54
 80001e0:	200001fa 	.word	0x200001fa
 80001e4:	200001f8 	.word	0x200001f8

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b090      	sub	sp, #64	; 0x40
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f003 f860 	bl	80032bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
 8000208:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800020a:	2301      	movs	r3, #1
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800020e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000212:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000218:	2301      	movs	r3, #1
 800021a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021c:	2302      	movs	r3, #2
 800021e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000226:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800022a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022c:	f107 0318 	add.w	r3, r7, #24
 8000230:	4618      	mov	r0, r3
 8000232:	f001 f81b 	bl	800126c <HAL_RCC_OscConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800023c:	f000 f968 	bl	8000510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000240:	230f      	movs	r3, #15
 8000242:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000244:	2302      	movs	r3, #2
 8000246:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000256:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2102      	movs	r1, #2
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fa85 	bl	800176c <HAL_RCC_ClockConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000268:	f000 f952 	bl	8000510 <Error_Handler>
  }
}
 800026c:	bf00      	nop
 800026e:	3740      	adds	r7, #64	; 0x40
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b08e      	sub	sp, #56	; 0x38
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000288:	f107 0320 	add.w	r3, r7, #32
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
 80002a0:	615a      	str	r2, [r3, #20]
 80002a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002a4:	4b38      	ldr	r3, [pc, #224]	; (8000388 <MX_TIM2_Init+0x114>)
 80002a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 282;
 80002ac:	4b36      	ldr	r3, [pc, #216]	; (8000388 <MX_TIM2_Init+0x114>)
 80002ae:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80002b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b4:	4b34      	ldr	r3, [pc, #208]	; (8000388 <MX_TIM2_Init+0x114>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80002ba:	4b33      	ldr	r3, [pc, #204]	; (8000388 <MX_TIM2_Init+0x114>)
 80002bc:	22ff      	movs	r2, #255	; 0xff
 80002be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c0:	4b31      	ldr	r3, [pc, #196]	; (8000388 <MX_TIM2_Init+0x114>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002c6:	4b30      	ldr	r3, [pc, #192]	; (8000388 <MX_TIM2_Init+0x114>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002cc:	482e      	ldr	r0, [pc, #184]	; (8000388 <MX_TIM2_Init+0x114>)
 80002ce:	f001 fbe9 	bl	8001aa4 <HAL_TIM_Base_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80002d8:	f000 f91a 	bl	8000510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e6:	4619      	mov	r1, r3
 80002e8:	4827      	ldr	r0, [pc, #156]	; (8000388 <MX_TIM2_Init+0x114>)
 80002ea:	f001 ff3d 	bl	8002168 <HAL_TIM_ConfigClockSource>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80002f4:	f000 f90c 	bl	8000510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002f8:	4823      	ldr	r0, [pc, #140]	; (8000388 <MX_TIM2_Init+0x114>)
 80002fa:	f001 fc75 	bl	8001be8 <HAL_TIM_PWM_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000304:	f000 f904 	bl	8000510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000308:	2300      	movs	r3, #0
 800030a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800030c:	2300      	movs	r3, #0
 800030e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000310:	f107 0320 	add.w	r3, r7, #32
 8000314:	4619      	mov	r1, r3
 8000316:	481c      	ldr	r0, [pc, #112]	; (8000388 <MX_TIM2_Init+0x114>)
 8000318:	f002 faae 	bl	8002878 <HAL_TIMEx_MasterConfigSynchronization>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000322:	f000 f8f5 	bl	8000510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000326:	2360      	movs	r3, #96	; 0x60
 8000328:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2200      	movs	r2, #0
 800033a:	4619      	mov	r1, r3
 800033c:	4812      	ldr	r0, [pc, #72]	; (8000388 <MX_TIM2_Init+0x114>)
 800033e:	f001 fe55 	bl	8001fec <HAL_TIM_PWM_ConfigChannel>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000348:	f000 f8e2 	bl	8000510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2204      	movs	r2, #4
 8000350:	4619      	mov	r1, r3
 8000352:	480d      	ldr	r0, [pc, #52]	; (8000388 <MX_TIM2_Init+0x114>)
 8000354:	f001 fe4a 	bl	8001fec <HAL_TIM_PWM_ConfigChannel>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800035e:	f000 f8d7 	bl	8000510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2208      	movs	r2, #8
 8000366:	4619      	mov	r1, r3
 8000368:	4807      	ldr	r0, [pc, #28]	; (8000388 <MX_TIM2_Init+0x114>)
 800036a:	f001 fe3f 	bl	8001fec <HAL_TIM_PWM_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000374:	f000 f8cc 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000378:	4803      	ldr	r0, [pc, #12]	; (8000388 <MX_TIM2_Init+0x114>)
 800037a:	f000 faa5 	bl	80008c8 <HAL_TIM_MspPostInit>

}
 800037e:	bf00      	nop
 8000380:	3738      	adds	r7, #56	; 0x38
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000a58 	.word	0x20000a58

0800038c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000392:	f107 0308 	add.w	r3, r7, #8
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a0:	463b      	mov	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003a8:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <MX_TIM3_Init+0x94>)
 80003aa:	4a1e      	ldr	r2, [pc, #120]	; (8000424 <MX_TIM3_Init+0x98>)
 80003ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 80003ae:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <MX_TIM3_Init+0x94>)
 80003b0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80003b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_TIM3_Init+0x94>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_TIM3_Init+0x94>)
 80003be:	22c7      	movs	r2, #199	; 0xc7
 80003c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_TIM3_Init+0x94>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_TIM3_Init+0x94>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003ce:	4814      	ldr	r0, [pc, #80]	; (8000420 <MX_TIM3_Init+0x94>)
 80003d0:	f001 fb68 	bl	8001aa4 <HAL_TIM_Base_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80003da:	f000 f899 	bl	8000510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003e4:	f107 0308 	add.w	r3, r7, #8
 80003e8:	4619      	mov	r1, r3
 80003ea:	480d      	ldr	r0, [pc, #52]	; (8000420 <MX_TIM3_Init+0x94>)
 80003ec:	f001 febc 	bl	8002168 <HAL_TIM_ConfigClockSource>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80003f6:	f000 f88b 	bl	8000510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fa:	2300      	movs	r3, #0
 80003fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000402:	463b      	mov	r3, r7
 8000404:	4619      	mov	r1, r3
 8000406:	4806      	ldr	r0, [pc, #24]	; (8000420 <MX_TIM3_Init+0x94>)
 8000408:	f002 fa36 	bl	8002878 <HAL_TIMEx_MasterConfigSynchronization>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000412:	f000 f87d 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200001fc 	.word	0x200001fc
 8000424:	40000400 	.word	0x40000400

08000428 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <MX_USART1_UART_Init+0x50>)
 8000430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800044e:	220c      	movs	r2, #12
 8000450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000460:	f002 fa7a 	bl	8002958 <HAL_UART_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800046a:	f000 f851 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000244 	.word	0x20000244
 8000478:	40013800 	.word	0x40013800

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <MX_GPIO_Init+0x8c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a1c      	ldr	r2, [pc, #112]	; (8000508 <MX_GPIO_Init+0x8c>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_GPIO_Init+0x8c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0320 	and.w	r3, r3, #32
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b17      	ldr	r3, [pc, #92]	; (8000508 <MX_GPIO_Init+0x8c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a16      	ldr	r2, [pc, #88]	; (8000508 <MX_GPIO_Init+0x8c>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_GPIO_Init+0x8c>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_GPIO_Init+0x8c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a10      	ldr	r2, [pc, #64]	; (8000508 <MX_GPIO_Init+0x8c>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_GPIO_Init+0x8c>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP_RESET_Pin|ESP_ENABLE_Pin, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	2118      	movs	r1, #24
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <MX_GPIO_Init+0x90>)
 80004de:	f000 fead 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ESP_RESET_Pin ESP_ENABLE_Pin */
  GPIO_InitStruct.Pin = ESP_RESET_Pin|ESP_ENABLE_Pin;
 80004e2:	2318      	movs	r3, #24
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e6:	2301      	movs	r3, #1
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ee:	2303      	movs	r3, #3
 80004f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4619      	mov	r1, r3
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <MX_GPIO_Init+0x90>)
 80004fa:	f000 fd45 	bl	8000f88 <HAL_GPIO_Init>

}
 80004fe:	bf00      	nop
 8000500:	3720      	adds	r7, #32
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000
 800050c:	40010c00 	.word	0x40010c00

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <ESP_RESET>:
 */

#include "myLibrary.h"

void ESP_RESET()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2110      	movs	r1, #16
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <ESP_RESET+0x38>)
 8000526:	f000 fe89 	bl	800123c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RESET_GPIO_Port, ESP_RESET_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2108      	movs	r1, #8
 800052e:	4809      	ldr	r0, [pc, #36]	; (8000554 <ESP_RESET+0x38>)
 8000530:	f000 fe84 	bl	800123c <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8000534:	201e      	movs	r0, #30
 8000536:	f000 fb81 	bl	8000c3c <HAL_Delay>
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2110      	movs	r1, #16
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <ESP_RESET+0x38>)
 8000540:	f000 fe7c 	bl	800123c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RESET_GPIO_Port, ESP_RESET_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2108      	movs	r1, #8
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <ESP_RESET+0x38>)
 800054a:	f000 fe77 	bl	800123c <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40010c00 	.word	0x40010c00

08000558 <ESP_Server_Init>:

void ESP_Server_Init()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	ESP_RESET();
 800055c:	f7ff ffde 	bl	800051c <ESP_RESET>
	HAL_Delay(2000);
 8000560:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000564:	f000 fb6a 	bl	8000c3c <HAL_Delay>
	ESP_Clear_Buffer();
 8000568:	f000 f844 	bl	80005f4 <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+RST\r\n", strlen("AT+RST\r\n"), 100);
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	2208      	movs	r2, #8
 8000570:	491a      	ldr	r1, [pc, #104]	; (80005dc <ESP_Server_Init+0x84>)
 8000572:	481b      	ldr	r0, [pc, #108]	; (80005e0 <ESP_Server_Init+0x88>)
 8000574:	f002 fa3d 	bl	80029f2 <HAL_UART_Transmit>
	HAL_Delay(1500);
 8000578:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800057c:	f000 fb5e 	bl	8000c3c <HAL_Delay>
	ESP_Clear_Buffer();
 8000580:	f000 f838 	bl	80005f4 <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"), 100);
 8000584:	2364      	movs	r3, #100	; 0x64
 8000586:	220d      	movs	r2, #13
 8000588:	4916      	ldr	r1, [pc, #88]	; (80005e4 <ESP_Server_Init+0x8c>)
 800058a:	4815      	ldr	r0, [pc, #84]	; (80005e0 <ESP_Server_Init+0x88>)
 800058c:	f002 fa31 	bl	80029f2 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000594:	f000 fb52 	bl	8000c3c <HAL_Delay>
	ESP_Clear_Buffer();
 8000598:	f000 f82c 	bl	80005f4 <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPMUX=1\r\n", strlen("AT+CIPMUX=1\r\n"), 100);
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	220d      	movs	r2, #13
 80005a0:	4911      	ldr	r1, [pc, #68]	; (80005e8 <ESP_Server_Init+0x90>)
 80005a2:	480f      	ldr	r0, [pc, #60]	; (80005e0 <ESP_Server_Init+0x88>)
 80005a4:	f002 fa25 	bl	80029f2 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ac:	f000 fb46 	bl	8000c3c <HAL_Delay>
	ESP_Clear_Buffer();
 80005b0:	f000 f820 	bl	80005f4 <ESP_Clear_Buffer>

	/*HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPDOMAIN=\"stm32.led.strip.iot\"\r\n", strlen("AT+CIPDOMAIN=\"stm32.led.strip.iot\"\r\n"), 100);
	HAL_Delay(1000);
	ESP_Clear_Buffer();*/

	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSERVER=1,80\r\n", strlen("AT+CIPSERVER=1,80\r\n"), 100);
 80005b4:	2364      	movs	r3, #100	; 0x64
 80005b6:	2213      	movs	r2, #19
 80005b8:	490c      	ldr	r1, [pc, #48]	; (80005ec <ESP_Server_Init+0x94>)
 80005ba:	4809      	ldr	r0, [pc, #36]	; (80005e0 <ESP_Server_Init+0x88>)
 80005bc:	f002 fa19 	bl	80029f2 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80005c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c4:	f000 fb3a 	bl	8000c3c <HAL_Delay>
	ESP_Clear_Buffer();
 80005c8:	f000 f814 	bl	80005f4 <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWJAP=\"WiFiSSID\",\"password\"\r\n", strlen("AT+CWJAP=\"WiFiSSID\",\"password\"\r\n"), 100);
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	2220      	movs	r2, #32
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <ESP_Server_Init+0x98>)
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <ESP_Server_Init+0x88>)
 80005d4:	f002 fa0d 	bl	80029f2 <HAL_UART_Transmit>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	0800344c 	.word	0x0800344c
 80005e0:	20000244 	.word	0x20000244
 80005e4:	08003458 	.word	0x08003458
 80005e8:	08003468 	.word	0x08003468
 80005ec:	08003478 	.word	0x08003478
 80005f0:	0800348c 	.word	0x0800348c

080005f4 <ESP_Clear_Buffer>:

void ESP_Clear_Buffer()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	memset(buffer, 0, 2000);
 80005f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005fc:	2100      	movs	r1, #0
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <ESP_Clear_Buffer+0x1c>)
 8000600:	f002 fe5c 	bl	80032bc <memset>
	buffer_index = 0;
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <ESP_Clear_Buffer+0x20>)
 8000606:	2200      	movs	r2, #0
 8000608:	801a      	strh	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000284 	.word	0x20000284
 8000614:	20000aa0 	.word	0x20000aa0

08000618 <string_compare>:

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000618:	b480      	push	{r7}
 800061a:	b087      	sub	sp, #28
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	4613      	mov	r3, r2
 8000624:	80fb      	strh	r3, [r7, #6]
	 uint16_t comVAR=0, i;
 8000626:	2300      	movs	r3, #0
 8000628:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 800062a:	2300      	movs	r3, #0
 800062c:	82bb      	strh	r3, [r7, #20]
 800062e:	e012      	b.n	8000656 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000630:	8abb      	ldrh	r3, [r7, #20]
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	4413      	add	r3, r2
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	8abb      	ldrh	r3, [r7, #20]
 800063a:	68b9      	ldr	r1, [r7, #8]
 800063c:	440b      	add	r3, r1
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	429a      	cmp	r2, r3
 8000642:	d103      	bne.n	800064c <string_compare+0x34>
	   	  		  comVAR++;
 8000644:	8afb      	ldrh	r3, [r7, #22]
 8000646:	3301      	adds	r3, #1
 8000648:	82fb      	strh	r3, [r7, #22]
 800064a:	e001      	b.n	8000650 <string_compare+0x38>
	   	  	  else comVAR=0;
 800064c:	2300      	movs	r3, #0
 800064e:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 8000650:	8abb      	ldrh	r3, [r7, #20]
 8000652:	3301      	adds	r3, #1
 8000654:	82bb      	strh	r3, [r7, #20]
 8000656:	8aba      	ldrh	r2, [r7, #20]
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	429a      	cmp	r2, r3
 800065c:	d3e8      	bcc.n	8000630 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 800065e:	8afa      	ldrh	r2, [r7, #22]
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	429a      	cmp	r2, r3
 8000664:	d101      	bne.n	800066a <string_compare+0x52>
		 	return 1;
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <string_compare+0x54>
	 else 	return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	371c      	adds	r7, #28
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <string_contains>:

int string_contains(char bufferArray[], char searchedString[], uint16_t length)
{
 8000676:	b590      	push	{r4, r7, lr}
 8000678:	b087      	sub	sp, #28
 800067a:	af00      	add	r7, sp, #0
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	4613      	mov	r3, r2
 8000682:	80fb      	strh	r3, [r7, #6]
	uint8_t result=0;
 8000684:	2300      	movs	r3, #0
 8000686:	757b      	strb	r3, [r7, #21]
	for(uint16_t i=0; i<length; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	82fb      	strh	r3, [r7, #22]
 800068c:	e016      	b.n	80006bc <string_contains+0x46>
	{
		result = string_compare(&bufferArray[i], &searchedString[0], strlen(searchedString));
 800068e:	8afb      	ldrh	r3, [r7, #22]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	18d4      	adds	r4, r2, r3
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f7ff fd59 	bl	800014c <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	b29b      	uxth	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	68b9      	ldr	r1, [r7, #8]
 80006a2:	4620      	mov	r0, r4
 80006a4:	f7ff ffb8 	bl	8000618 <string_compare>
 80006a8:	4603      	mov	r3, r0
 80006aa:	757b      	strb	r3, [r7, #21]
		if(result == 1)
 80006ac:	7d7b      	ldrb	r3, [r7, #21]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d101      	bne.n	80006b6 <string_contains+0x40>
			return i;
 80006b2:	8afb      	ldrh	r3, [r7, #22]
 80006b4:	e008      	b.n	80006c8 <string_contains+0x52>
	for(uint16_t i=0; i<length; i++)
 80006b6:	8afb      	ldrh	r3, [r7, #22]
 80006b8:	3301      	adds	r3, #1
 80006ba:	82fb      	strh	r3, [r7, #22]
 80006bc:	8afa      	ldrh	r2, [r7, #22]
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d3e4      	bcc.n	800068e <string_contains+0x18>
	}
	return -1;
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	371c      	adds	r7, #28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}

080006d0 <messageHandler>:

void messageHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 80006d6:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <messageHandler+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	68da      	ldr	r2, [r3, #12]
 80006dc:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <messageHandler+0x100>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f022 0220 	bic.w	r2, r2, #32
 80006e4:	60da      	str	r2, [r3, #12]
	int position = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
	if((position = string_contains((char*)buffer, "GET", buffer_index)) != -1)
 80006ea:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <messageHandler+0x104>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4939      	ldr	r1, [pc, #228]	; (80007d8 <messageHandler+0x108>)
 80006f2:	483a      	ldr	r0, [pc, #232]	; (80007dc <messageHandler+0x10c>)
 80006f4:	f7ff ffbf 	bl	8000676 <string_contains>
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000700:	d01e      	beq.n	8000740 <messageHandler+0x70>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSEND=0,22\r\n", strlen("AT+CIPSEND=0,22\r\n"), 100);
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2211      	movs	r2, #17
 8000706:	4936      	ldr	r1, [pc, #216]	; (80007e0 <messageHandler+0x110>)
 8000708:	4831      	ldr	r0, [pc, #196]	; (80007d0 <messageHandler+0x100>)
 800070a:	f002 f972 	bl	80029f2 <HAL_UART_Transmit>
		HAL_Delay(300);
 800070e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000712:	f000 fa93 	bl	8000c3c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)"STM32 LED Strip Server", strlen("STM32 LED Strip Server"), 100);
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	2216      	movs	r2, #22
 800071a:	4932      	ldr	r1, [pc, #200]	; (80007e4 <messageHandler+0x114>)
 800071c:	482c      	ldr	r0, [pc, #176]	; (80007d0 <messageHandler+0x100>)
 800071e:	f002 f968 	bl	80029f2 <HAL_UART_Transmit>
		HAL_Delay(300);
 8000722:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000726:	f000 fa89 	bl	8000c3c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPCLOSE=0\r\n", strlen("AT+CIPCLOSE=0\r\n"), 100);
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	220f      	movs	r2, #15
 800072e:	492e      	ldr	r1, [pc, #184]	; (80007e8 <messageHandler+0x118>)
 8000730:	4827      	ldr	r0, [pc, #156]	; (80007d0 <messageHandler+0x100>)
 8000732:	f002 f95e 	bl	80029f2 <HAL_UART_Transmit>
		HAL_Delay(300);
 8000736:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800073a:	f000 fa7f 	bl	8000c3c <HAL_Delay>
 800073e:	e038      	b.n	80007b2 <messageHandler+0xe2>
	}else if((position = string_contains((char*)buffer, "SET_LED_RGB:", buffer_index)) != -1)
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <messageHandler+0x104>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4929      	ldr	r1, [pc, #164]	; (80007ec <messageHandler+0x11c>)
 8000748:	4824      	ldr	r0, [pc, #144]	; (80007dc <messageHandler+0x10c>)
 800074a:	f7ff ff94 	bl	8000676 <string_contains>
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000756:	d02c      	beq.n	80007b2 <messageHandler+0xe2>
	{
		uint8_t red, green, blue;
		red = atoi((char*)&buffer[position + 12]);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	330c      	adds	r3, #12
 800075c:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <messageHandler+0x10c>)
 800075e:	4413      	add	r3, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fd83 	bl	800326c <atoi>
 8000766:	4603      	mov	r3, r0
 8000768:	70fb      	strb	r3, [r7, #3]
		green = atoi((char*)&buffer[position + 16]);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3310      	adds	r3, #16
 800076e:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <messageHandler+0x10c>)
 8000770:	4413      	add	r3, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fd7a 	bl	800326c <atoi>
 8000778:	4603      	mov	r3, r0
 800077a:	70bb      	strb	r3, [r7, #2]
		blue = atoi((char*)&buffer[position + 20]);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3314      	adds	r3, #20
 8000780:	4a16      	ldr	r2, [pc, #88]	; (80007dc <messageHandler+0x10c>)
 8000782:	4413      	add	r3, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fd71 	bl	800326c <atoi>
 800078a:	4603      	mov	r3, r0
 800078c:	707b      	strb	r3, [r7, #1]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, red);
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <messageHandler+0x120>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	78fa      	ldrb	r2, [r7, #3]
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, green);
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <messageHandler+0x120>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	78ba      	ldrb	r2, [r7, #2]
 800079c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, blue);
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <messageHandler+0x120>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	787a      	ldrb	r2, [r7, #1]
 80007a4:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPCLOSE=0\r\n", strlen("AT+CIPCLOSE=0\r\n"), 100);
 80007a6:	2364      	movs	r3, #100	; 0x64
 80007a8:	220f      	movs	r2, #15
 80007aa:	490f      	ldr	r1, [pc, #60]	; (80007e8 <messageHandler+0x118>)
 80007ac:	4808      	ldr	r0, [pc, #32]	; (80007d0 <messageHandler+0x100>)
 80007ae:	f002 f920 	bl	80029f2 <HAL_UART_Transmit>
	}
	ESP_Clear_Buffer();
 80007b2:	f7ff ff1f 	bl	80005f4 <ESP_Clear_Buffer>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <messageHandler+0x100>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68da      	ldr	r2, [r3, #12]
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <messageHandler+0x100>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f042 0220 	orr.w	r2, r2, #32
 80007c4:	60da      	str	r2, [r3, #12]
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000244 	.word	0x20000244
 80007d4:	20000aa0 	.word	0x20000aa0
 80007d8:	080034b0 	.word	0x080034b0
 80007dc:	20000284 	.word	0x20000284
 80007e0:	080034b4 	.word	0x080034b4
 80007e4:	080034c8 	.word	0x080034c8
 80007e8:	080034e0 	.word	0x080034e0
 80007ec:	080034f0 	.word	0x080034f0
 80007f0:	20000a58 	.word	0x20000a58

080007f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_MspInit+0x5c>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <HAL_MspInit+0x5c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_MspInit+0x5c>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x5c>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_MspInit+0x5c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	61d3      	str	r3, [r2, #28]
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x5c>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_MspInit+0x60>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_MspInit+0x60>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	40021000 	.word	0x40021000
 8000854:	40010000 	.word	0x40010000

08000858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000868:	d10c      	bne.n	8000884 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <HAL_TIM_Base_MspInit+0x68>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <HAL_TIM_Base_MspInit+0x68>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_TIM_Base_MspInit+0x68>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000882:	e018      	b.n	80008b6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_TIM_Base_MspInit+0x6c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d113      	bne.n	80008b6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_TIM_Base_MspInit+0x68>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <HAL_TIM_Base_MspInit+0x68>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_TIM_Base_MspInit+0x68>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	201d      	movs	r0, #29
 80008ac:	f000 fabf 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008b0:	201d      	movs	r0, #29
 80008b2:	f000 fad8 	bl	8000e66 <HAL_NVIC_EnableIRQ>
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40000400 	.word	0x40000400

080008c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e6:	d117      	bne.n	8000918 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_TIM_MspPostInit+0x58>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <HAL_TIM_MspPostInit+0x58>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_TIM_MspPostInit+0x58>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000900:	2307      	movs	r3, #7
 8000902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2302      	movs	r3, #2
 800090a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <HAL_TIM_MspPostInit+0x5c>)
 8000914:	f000 fb38 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	40010800 	.word	0x40010800

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <HAL_UART_MspInit+0x9c>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d139      	bne.n	80009bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <HAL_UART_MspInit+0xa0>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a1e      	ldr	r2, [pc, #120]	; (80009c8 <HAL_UART_MspInit+0xa0>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <HAL_UART_MspInit+0xa0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <HAL_UART_MspInit+0xa0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <HAL_UART_MspInit+0xa0>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <HAL_UART_MspInit+0xa0>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4619      	mov	r1, r3
 800098c:	480f      	ldr	r0, [pc, #60]	; (80009cc <HAL_UART_MspInit+0xa4>)
 800098e:	f000 fafb 	bl	8000f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4619      	mov	r1, r3
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <HAL_UART_MspInit+0xa4>)
 80009a8:	f000 faee 	bl	8000f88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2025      	movs	r0, #37	; 0x25
 80009b2:	f000 fa3c 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b6:	2025      	movs	r0, #37	; 0x25
 80009b8:	f000 fa55 	bl	8000e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40013800 	.word	0x40013800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010800 	.word	0x40010800

080009d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009d4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <__NVIC_SystemReset+0x20>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009e0:	4903      	ldr	r1, [pc, #12]	; (80009f0 <__NVIC_SystemReset+0x20>)
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <__NVIC_SystemReset+0x24>)
 80009e4:	4313      	orrs	r3, r2
 80009e6:	60cb      	str	r3, [r1, #12]
 80009e8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <__NVIC_SystemReset+0x1c>
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	05fa0004 	.word	0x05fa0004

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__NVIC_SystemReset();
 8000a08:	f7ff ffe2 	bl	80009d0 <__NVIC_SystemReset>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr

08000a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a46:	f000 f8dd 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(timeout != 0 && timeout < 10)
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <TIM3_IRQHandler+0x60>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d009      	beq.n	8000a70 <TIM3_IRQHandler+0x20>
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <TIM3_IRQHandler+0x60>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	2b09      	cmp	r3, #9
 8000a62:	d805      	bhi.n	8000a70 <TIM3_IRQHandler+0x20>
		timeout++;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <TIM3_IRQHandler+0x60>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <TIM3_IRQHandler+0x60>)
 8000a6e:	801a      	strh	r2, [r3, #0]

	if(timeout > 5)
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <TIM3_IRQHandler+0x60>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	d905      	bls.n	8000a84 <TIM3_IRQHandler+0x34>
	{
		timeout = 0;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <TIM3_IRQHandler+0x60>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	801a      	strh	r2, [r3, #0]
		messageHandlerFlag = 1;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <TIM3_IRQHandler+0x64>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	801a      	strh	r2, [r3, #0]
	}

	if(enable_w == 1)
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <TIM3_IRQHandler+0x68>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d10b      	bne.n	8000aa4 <TIM3_IRQHandler+0x54>
	{
		watchdog++;
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <TIM3_IRQHandler+0x6c>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <TIM3_IRQHandler+0x6c>)
 8000a96:	801a      	strh	r2, [r3, #0]
		if(watchdog>250)
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <TIM3_IRQHandler+0x6c>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	2bfa      	cmp	r3, #250	; 0xfa
 8000a9e:	d901      	bls.n	8000aa4 <TIM3_IRQHandler+0x54>
			__NVIC_SystemReset();
 8000aa0:	f7ff ff96 	bl	80009d0 <__NVIC_SystemReset>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000aa4:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <TIM3_IRQHandler+0x70>)
 8000aa6:	f001 f999 	bl	8001ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000a56 	.word	0x20000a56
 8000ab4:	200001fa 	.word	0x200001fa
 8000ab8:	20000a54 	.word	0x20000a54
 8000abc:	200001f8 	.word	0x200001f8
 8000ac0:	200001fc 	.word	0x200001fc

08000ac4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	timeout = 1;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <USART1_IRQHandler+0x48>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	801a      	strh	r2, [r3, #0]

	if(buffer_index < 2000)
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <USART1_IRQHandler+0x4c>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ad6:	d20e      	bcs.n	8000af6 <USART1_IRQHandler+0x32>
		HAL_UART_Receive(&huart1, &buffer[buffer_index++], 1, 10);
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <USART1_IRQHandler+0x4c>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	b291      	uxth	r1, r2
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <USART1_IRQHandler+0x4c>)
 8000ae2:	8011      	strh	r1, [r2, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <USART1_IRQHandler+0x50>)
 8000ae8:	18d1      	adds	r1, r2, r3
 8000aea:	230a      	movs	r3, #10
 8000aec:	2201      	movs	r2, #1
 8000aee:	480a      	ldr	r0, [pc, #40]	; (8000b18 <USART1_IRQHandler+0x54>)
 8000af0:	f002 f811 	bl	8002b16 <HAL_UART_Receive>
 8000af4:	e005      	b.n	8000b02 <USART1_IRQHandler+0x3e>
	else
		HAL_UART_Receive(&huart1, &buffer[1999], 1, 10);
 8000af6:	230a      	movs	r3, #10
 8000af8:	2201      	movs	r2, #1
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <USART1_IRQHandler+0x58>)
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <USART1_IRQHandler+0x54>)
 8000afe:	f002 f80a 	bl	8002b16 <HAL_UART_Receive>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <USART1_IRQHandler+0x54>)
 8000b04:	f002 f8a6 	bl	8002c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000a56 	.word	0x20000a56
 8000b10:	20000aa0 	.word	0x20000aa0
 8000b14:	20000284 	.word	0x20000284
 8000b18:	20000244 	.word	0x20000244
 8000b1c:	20000a53 	.word	0x20000a53

08000b20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b2e:	e003      	b.n	8000b38 <LoopCopyDataInit>

08000b30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b36:	3104      	adds	r1, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b38:	480a      	ldr	r0, [pc, #40]	; (8000b64 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b40:	d3f6      	bcc.n	8000b30 <CopyDataInit>
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b44:	e002      	b.n	8000b4c <LoopFillZerobss>

08000b46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b48:	f842 3b04 	str.w	r3, [r2], #4

08000b4c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b50:	d3f9      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b52:	f7ff ffe5 	bl	8000b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f002 fb8d 	bl	8003274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5a:	f7ff faff 	bl	800015c <main>
  bx lr
 8000b5e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b60:	08003640 	.word	0x08003640
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b68:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8000b6c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8000b70:	20000aa8 	.word	0x20000aa8

08000b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_2_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_Init+0x28>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_Init+0x28>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f945 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fe2e 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f95d 	bl	8000e82 <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f925 	bl	8000e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_IncTick+0x1c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_IncTick+0x20>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <HAL_IncTick+0x20>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000aa4 	.word	0x20000aa4

08000c28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <HAL_GetTick+0x10>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	20000aa4 	.word	0x20000aa4

08000c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff fff0 	bl	8000c28 <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c54:	d005      	beq.n	8000c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_Delay+0x40>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c62:	bf00      	nop
 8000c64:	f7ff ffe0 	bl	8000c28 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f7      	bhi.n	8000c64 <HAL_Delay+0x28>
  {
  }
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000008 	.word	0x20000008

08000c80 <__NVIC_SetPriorityGrouping>:
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_EnableIRQ>:
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4906      	ldr	r1, [pc, #24]	; (8000d18 <__NVIC_EnableIRQ+0x34>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_SetPriority>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	; (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	; 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de4:	d301      	bcc.n	8000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00f      	b.n	8000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <SysTick_Config+0x40>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df2:	210f      	movs	r1, #15
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f7ff ff90 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SysTick_Config+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x40>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff2d 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff42 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff90 	bl	8000d70 <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5f 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff35 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffa2 	bl	8000dd4 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d005      	beq.n	8000ebe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e051      	b.n	8000f62 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 020e 	bic.w	r2, r2, #14
 8000ecc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0201 	bic.w	r2, r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <HAL_DMA_Abort_IT+0xd0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d029      	beq.n	8000f3c <HAL_DMA_Abort_IT+0xa0>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a20      	ldr	r2, [pc, #128]	; (8000f70 <HAL_DMA_Abort_IT+0xd4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d022      	beq.n	8000f38 <HAL_DMA_Abort_IT+0x9c>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <HAL_DMA_Abort_IT+0xd8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d01a      	beq.n	8000f32 <HAL_DMA_Abort_IT+0x96>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_DMA_Abort_IT+0xdc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d012      	beq.n	8000f2c <HAL_DMA_Abort_IT+0x90>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <HAL_DMA_Abort_IT+0xe0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d00a      	beq.n	8000f26 <HAL_DMA_Abort_IT+0x8a>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <HAL_DMA_Abort_IT+0xe4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d102      	bne.n	8000f20 <HAL_DMA_Abort_IT+0x84>
 8000f1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f1e:	e00e      	b.n	8000f3e <HAL_DMA_Abort_IT+0xa2>
 8000f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f24:	e00b      	b.n	8000f3e <HAL_DMA_Abort_IT+0xa2>
 8000f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2a:	e008      	b.n	8000f3e <HAL_DMA_Abort_IT+0xa2>
 8000f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f30:	e005      	b.n	8000f3e <HAL_DMA_Abort_IT+0xa2>
 8000f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f36:	e002      	b.n	8000f3e <HAL_DMA_Abort_IT+0xa2>
 8000f38:	2310      	movs	r3, #16
 8000f3a:	e000      	b.n	8000f3e <HAL_DMA_Abort_IT+0xa2>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_DMA_Abort_IT+0xe8>)
 8000f40:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	4798      	blx	r3
    } 
  }
  return status;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40020008 	.word	0x40020008
 8000f70:	4002001c 	.word	0x4002001c
 8000f74:	40020030 	.word	0x40020030
 8000f78:	40020044 	.word	0x40020044
 8000f7c:	40020058 	.word	0x40020058
 8000f80:	4002006c 	.word	0x4002006c
 8000f84:	40020000 	.word	0x40020000

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b08b      	sub	sp, #44	; 0x2c
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9a:	e127      	b.n	80011ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f040 8116 	bne.w	80011e6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d034      	beq.n	800102c <HAL_GPIO_Init+0xa4>
 8000fc2:	2b12      	cmp	r3, #18
 8000fc4:	d80d      	bhi.n	8000fe2 <HAL_GPIO_Init+0x5a>
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d02b      	beq.n	8001022 <HAL_GPIO_Init+0x9a>
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d804      	bhi.n	8000fd8 <HAL_GPIO_Init+0x50>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d031      	beq.n	8001036 <HAL_GPIO_Init+0xae>
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d01c      	beq.n	8001010 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fd6:	e048      	b.n	800106a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d043      	beq.n	8001064 <HAL_GPIO_Init+0xdc>
 8000fdc:	2b11      	cmp	r3, #17
 8000fde:	d01b      	beq.n	8001018 <HAL_GPIO_Init+0x90>
          break;
 8000fe0:	e043      	b.n	800106a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fe2:	4a89      	ldr	r2, [pc, #548]	; (8001208 <HAL_GPIO_Init+0x280>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d026      	beq.n	8001036 <HAL_GPIO_Init+0xae>
 8000fe8:	4a87      	ldr	r2, [pc, #540]	; (8001208 <HAL_GPIO_Init+0x280>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d806      	bhi.n	8000ffc <HAL_GPIO_Init+0x74>
 8000fee:	4a87      	ldr	r2, [pc, #540]	; (800120c <HAL_GPIO_Init+0x284>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d020      	beq.n	8001036 <HAL_GPIO_Init+0xae>
 8000ff4:	4a86      	ldr	r2, [pc, #536]	; (8001210 <HAL_GPIO_Init+0x288>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01d      	beq.n	8001036 <HAL_GPIO_Init+0xae>
          break;
 8000ffa:	e036      	b.n	800106a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ffc:	4a85      	ldr	r2, [pc, #532]	; (8001214 <HAL_GPIO_Init+0x28c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0xae>
 8001002:	4a85      	ldr	r2, [pc, #532]	; (8001218 <HAL_GPIO_Init+0x290>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d016      	beq.n	8001036 <HAL_GPIO_Init+0xae>
 8001008:	4a84      	ldr	r2, [pc, #528]	; (800121c <HAL_GPIO_Init+0x294>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0xae>
          break;
 800100e:	e02c      	b.n	800106a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	623b      	str	r3, [r7, #32]
          break;
 8001016:	e028      	b.n	800106a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	3304      	adds	r3, #4
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e023      	b.n	800106a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	3308      	adds	r3, #8
 8001028:	623b      	str	r3, [r7, #32]
          break;
 800102a:	e01e      	b.n	800106a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	330c      	adds	r3, #12
 8001032:	623b      	str	r3, [r7, #32]
          break;
 8001034:	e019      	b.n	800106a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800103e:	2304      	movs	r3, #4
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e012      	b.n	800106a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d105      	bne.n	8001058 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800104c:	2308      	movs	r3, #8
 800104e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	611a      	str	r2, [r3, #16]
          break;
 8001056:	e008      	b.n	800106a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	615a      	str	r2, [r3, #20]
          break;
 8001062:	e002      	b.n	800106a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2bff      	cmp	r3, #255	; 0xff
 800106e:	d801      	bhi.n	8001074 <HAL_GPIO_Init+0xec>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	e001      	b.n	8001078 <HAL_GPIO_Init+0xf0>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3304      	adds	r3, #4
 8001078:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2bff      	cmp	r3, #255	; 0xff
 800107e:	d802      	bhi.n	8001086 <HAL_GPIO_Init+0xfe>
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x104>
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	3b08      	subs	r3, #8
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	210f      	movs	r1, #15
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	401a      	ands	r2, r3
 800109e:	6a39      	ldr	r1, [r7, #32]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	431a      	orrs	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 8096 	beq.w	80011e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ba:	4b59      	ldr	r3, [pc, #356]	; (8001220 <HAL_GPIO_Init+0x298>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a58      	ldr	r2, [pc, #352]	; (8001220 <HAL_GPIO_Init+0x298>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	4b56      	ldr	r3, [pc, #344]	; (8001220 <HAL_GPIO_Init+0x298>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010d2:	4a54      	ldr	r2, [pc, #336]	; (8001224 <HAL_GPIO_Init+0x29c>)
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4013      	ands	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x2a0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x19e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_GPIO_Init+0x2a4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x19a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a49      	ldr	r2, [pc, #292]	; (8001230 <HAL_GPIO_Init+0x2a8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x196>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a48      	ldr	r2, [pc, #288]	; (8001234 <HAL_GPIO_Init+0x2ac>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x192>
 8001116:	2303      	movs	r3, #3
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x1a0>
 800111a:	2304      	movs	r3, #4
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x1a0>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x1a0>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x1a0>
 8001126:	2300      	movs	r3, #0
 8001128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001138:	493a      	ldr	r1, [pc, #232]	; (8001224 <HAL_GPIO_Init+0x29c>)
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4938      	ldr	r1, [pc, #224]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	43db      	mvns	r3, r3
 8001168:	4933      	ldr	r1, [pc, #204]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	492e      	ldr	r1, [pc, #184]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	604b      	str	r3, [r1, #4]
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	43db      	mvns	r3, r3
 8001190:	4929      	ldr	r1, [pc, #164]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 8001192:	4013      	ands	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	4924      	ldr	r1, [pc, #144]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	608b      	str	r3, [r1, #8]
 80011ae:	e006      	b.n	80011be <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	491f      	ldr	r1, [pc, #124]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	491a      	ldr	r1, [pc, #104]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60cb      	str	r3, [r1, #12]
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	43db      	mvns	r3, r3
 80011e0:	4915      	ldr	r1, [pc, #84]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	3301      	adds	r3, #1
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f47f aed0 	bne.w	8000f9c <HAL_GPIO_Init+0x14>
  }
}
 80011fc:	bf00      	nop
 80011fe:	372c      	adds	r7, #44	; 0x2c
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	10210000 	.word	0x10210000
 800120c:	10110000 	.word	0x10110000
 8001210:	10120000 	.word	0x10120000
 8001214:	10310000 	.word	0x10310000
 8001218:	10320000 	.word	0x10320000
 800121c:	10220000 	.word	0x10220000
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000
 8001228:	40010800 	.word	0x40010800
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40011000 	.word	0x40011000
 8001234:	40011400 	.word	0x40011400
 8001238:	40010400 	.word	0x40010400

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	611a      	str	r2, [r3, #16]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e26c      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8087 	beq.w	800139a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800128c:	4b92      	ldr	r3, [pc, #584]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b04      	cmp	r3, #4
 8001296:	d00c      	beq.n	80012b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001298:	4b8f      	ldr	r3, [pc, #572]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d112      	bne.n	80012ca <HAL_RCC_OscConfig+0x5e>
 80012a4:	4b8c      	ldr	r3, [pc, #560]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d10b      	bne.n	80012ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b2:	4b89      	ldr	r3, [pc, #548]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d06c      	beq.n	8001398 <HAL_RCC_OscConfig+0x12c>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d168      	bne.n	8001398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e246      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d2:	d106      	bne.n	80012e2 <HAL_RCC_OscConfig+0x76>
 80012d4:	4b80      	ldr	r3, [pc, #512]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a7f      	ldr	r2, [pc, #508]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	e02e      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x98>
 80012ea:	4b7b      	ldr	r3, [pc, #492]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a7a      	ldr	r2, [pc, #488]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b78      	ldr	r3, [pc, #480]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a77      	ldr	r2, [pc, #476]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0xbc>
 800130e:	4b72      	ldr	r3, [pc, #456]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a71      	ldr	r2, [pc, #452]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b6f      	ldr	r3, [pc, #444]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6e      	ldr	r2, [pc, #440]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 8001328:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a6a      	ldr	r2, [pc, #424]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a67      	ldr	r2, [pc, #412]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fc6e 	bl	8000c28 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fc6a 	bl	8000c28 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1fa      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0xe4>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc5a 	bl	8000c28 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fc56 	bl	8000c28 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1e6      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x10c>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d063      	beq.n	800146e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a6:	4b4c      	ldr	r3, [pc, #304]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013b2:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x18c>
 80013be:	4b46      	ldr	r3, [pc, #280]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x176>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e1ba      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4939      	ldr	r1, [pc, #228]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	e03a      	b.n	800146e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	4b36      	ldr	r3, [pc, #216]	; (80014dc <HAL_RCC_OscConfig+0x270>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fc0f 	bl	8000c28 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fc0b 	bl	8000c28 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e19b      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4927      	ldr	r1, [pc, #156]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_RCC_OscConfig+0x270>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fbee 	bl	8000c28 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fbea 	bl	8000c28 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e17a      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d03a      	beq.n	80014f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d019      	beq.n	80014b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_RCC_OscConfig+0x274>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001488:	f7ff fbce 	bl	8000c28 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff fbca 	bl	8000c28 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e15a      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f000 fada 	bl	8001a68 <RCC_Delay>
 80014b4:	e01c      	b.n	80014f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_RCC_OscConfig+0x274>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff fbb4 	bl	8000c28 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c2:	e00f      	b.n	80014e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fbb0 	bl	8000c28 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d908      	bls.n	80014e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e140      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	42420000 	.word	0x42420000
 80014e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	4b9e      	ldr	r3, [pc, #632]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e9      	bne.n	80014c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80a6 	beq.w	800164a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b97      	ldr	r3, [pc, #604]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b94      	ldr	r3, [pc, #592]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a93      	ldr	r2, [pc, #588]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b91      	ldr	r3, [pc, #580]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b8e      	ldr	r3, [pc, #568]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d118      	bne.n	8001568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4b8b      	ldr	r3, [pc, #556]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a8a      	ldr	r2, [pc, #552]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff fb71 	bl	8000c28 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff fb6d 	bl	8000c28 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	; 0x64
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e0fd      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b81      	ldr	r3, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x312>
 8001570:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a7a      	ldr	r2, [pc, #488]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e02d      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x334>
 8001586:	4b76      	ldr	r3, [pc, #472]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4a75      	ldr	r2, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	6213      	str	r3, [r2, #32]
 8001592:	4b73      	ldr	r3, [pc, #460]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4a72      	ldr	r2, [pc, #456]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	f023 0304 	bic.w	r3, r3, #4
 800159c:	6213      	str	r3, [r2, #32]
 800159e:	e01c      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d10c      	bne.n	80015c2 <HAL_RCC_OscConfig+0x356>
 80015a8:	4b6d      	ldr	r3, [pc, #436]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a6c      	ldr	r2, [pc, #432]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	4b6a      	ldr	r3, [pc, #424]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a69      	ldr	r2, [pc, #420]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	e00b      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 80015c2:	4b67      	ldr	r3, [pc, #412]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4a66      	ldr	r2, [pc, #408]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6213      	str	r3, [r2, #32]
 80015ce:	4b64      	ldr	r3, [pc, #400]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4a63      	ldr	r2, [pc, #396]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d015      	beq.n	800160e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb21 	bl	8000c28 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	e00a      	b.n	8001600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fb1d 	bl	8000c28 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e0ab      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	4b57      	ldr	r3, [pc, #348]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ee      	beq.n	80015ea <HAL_RCC_OscConfig+0x37e>
 800160c:	e014      	b.n	8001638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff fb0b 	bl	8000c28 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fb07 	bl	8000c28 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e095      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1ee      	bne.n	8001616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d105      	bne.n	800164a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163e:	4b48      	ldr	r3, [pc, #288]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a47      	ldr	r2, [pc, #284]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8081 	beq.w	8001756 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	4b42      	ldr	r3, [pc, #264]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d061      	beq.n	8001724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d146      	bne.n	80016f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_RCC_OscConfig+0x4fc>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fadb 	bl	8000c28 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fad7 	bl	8000c28 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e067      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001688:	4b35      	ldr	r3, [pc, #212]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169c:	d108      	bne.n	80016b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	492d      	ldr	r1, [pc, #180]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a19      	ldr	r1, [r3, #32]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	430b      	orrs	r3, r1
 80016c2:	4927      	ldr	r1, [pc, #156]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x4fc>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff faab 	bl	8000c28 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff faa7 	bl	8000c28 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e037      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46a>
 80016f4:	e02f      	b.n	8001756 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_RCC_OscConfig+0x4fc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fa94 	bl	8000c28 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff fa90 	bl	8000c28 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e020      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x498>
 8001722:	e018      	b.n	8001756 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e013      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	429a      	cmp	r2, r3
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	40007000 	.word	0x40007000
 8001768:	42420060 	.word	0x42420060

0800176c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0d0      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001780:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d910      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b67      	ldr	r3, [pc, #412]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 0207 	bic.w	r2, r3, #7
 8001796:	4965      	ldr	r1, [pc, #404]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d040      	beq.n	800188c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d115      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e073      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06b      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184a:	4b39      	ldr	r3, [pc, #228]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f023 0203 	bic.w	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4936      	ldr	r1, [pc, #216]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800185c:	f7ff f9e4 	bl	8000c28 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e00a      	b.n	800187a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff f9e0 	bl	8000c28 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e053      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 020c 	and.w	r2, r3, #12
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	429a      	cmp	r2, r3
 800188a:	d1eb      	bne.n	8001864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d210      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0207 	bic.w	r2, r3, #7
 80018a2:	4922      	ldr	r1, [pc, #136]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f821 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018fe:	4601      	mov	r1, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	fa21 f303 	lsr.w	r3, r1, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1cc>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1d0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f942 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000
 8001930:	40021000 	.word	0x40021000
 8001934:	08003514 	.word	0x08003514
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	b490      	push	{r4, r7}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001948:	1d3c      	adds	r4, r7, #4
 800194a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800194c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001950:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b04      	cmp	r3, #4
 8001978:	d002      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x40>
 800197a:	2b08      	cmp	r3, #8
 800197c:	d003      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x46>
 800197e:	e02d      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001982:	623b      	str	r3, [r7, #32]
      break;
 8001984:	e02d      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	0c9b      	lsrs	r3, r3, #18
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001992:	4413      	add	r3, r2
 8001994:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001998:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0c5b      	lsrs	r3, r3, #17
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019b2:	4413      	add	r3, r2
 80019b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80019be:	fb02 f203 	mul.w	r2, r2, r3
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	e004      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019d0:	fb02 f303 	mul.w	r3, r2, r3
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	623b      	str	r3, [r7, #32]
      break;
 80019da:	e002      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80019de:	623b      	str	r3, [r7, #32]
      break;
 80019e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e2:	6a3b      	ldr	r3, [r7, #32]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc90      	pop	{r4, r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	08003500 	.word	0x08003500
 80019f4:	08003510 	.word	0x08003510
 80019f8:	40021000 	.word	0x40021000
 80019fc:	007a1200 	.word	0x007a1200
 8001a00:	003d0900 	.word	0x003d0900

08001a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	20000000 	.word	0x20000000

08001a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a1c:	f7ff fff2 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a20:	4601      	mov	r1, r0
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	08003524 	.word	0x08003524

08001a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a44:	f7ff ffde 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a48:	4601      	mov	r1, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0adb      	lsrs	r3, r3, #11
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08003524 	.word	0x08003524

08001a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <RCC_Delay+0x34>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <RCC_Delay+0x38>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0a5b      	lsrs	r3, r3, #9
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a84:	bf00      	nop
  }
  while (Delay --);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	60fa      	str	r2, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f9      	bne.n	8001a84 <RCC_Delay+0x1c>
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	10624dd3 	.word	0x10624dd3

08001aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e041      	b.n	8001b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7fe fec4 	bl	8000858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3304      	adds	r3, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	f000 fc24 	bl	8002330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d001      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e03a      	b.n	8001bd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <HAL_TIM_Base_Start_IT+0x98>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00e      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x58>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b86:	d009      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x58>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x58>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d111      	bne.n	8001bc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d010      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bbe:	e007      	b.n	8001bd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40012c00 	.word	0x40012c00
 8001be0:	40000400 	.word	0x40000400
 8001be4:	40000800 	.word	0x40000800

08001be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e041      	b.n	8001c7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f839 	bl	8001c86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 fb82 	bl	8002330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_TIM_PWM_Start+0x24>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	e022      	b.n	8001d02 <HAL_TIM_PWM_Start+0x6a>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d109      	bne.n	8001cd6 <HAL_TIM_PWM_Start+0x3e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	e015      	b.n	8001d02 <HAL_TIM_PWM_Start+0x6a>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d109      	bne.n	8001cf0 <HAL_TIM_PWM_Start+0x58>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	e008      	b.n	8001d02 <HAL_TIM_PWM_Start+0x6a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e05e      	b.n	8001dc8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d104      	bne.n	8001d1a <HAL_TIM_PWM_Start+0x82>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d18:	e013      	b.n	8001d42 <HAL_TIM_PWM_Start+0xaa>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d104      	bne.n	8001d2a <HAL_TIM_PWM_Start+0x92>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d28:	e00b      	b.n	8001d42 <HAL_TIM_PWM_Start+0xaa>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d104      	bne.n	8001d3a <HAL_TIM_PWM_Start+0xa2>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d38:	e003      	b.n	8001d42 <HAL_TIM_PWM_Start+0xaa>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fd70 	bl	8002830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <HAL_TIM_PWM_Start+0x138>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d107      	bne.n	8001d6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <HAL_TIM_PWM_Start+0x138>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00e      	beq.n	8001d92 <HAL_TIM_PWM_Start+0xfa>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7c:	d009      	beq.n	8001d92 <HAL_TIM_PWM_Start+0xfa>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <HAL_TIM_PWM_Start+0x13c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d004      	beq.n	8001d92 <HAL_TIM_PWM_Start+0xfa>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <HAL_TIM_PWM_Start+0x140>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d111      	bne.n	8001db6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b06      	cmp	r3, #6
 8001da2:	d010      	beq.n	8001dc6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db4:	e007      	b.n	8001dc6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40000800 	.word	0x40000800

08001ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d122      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d11b      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0202 	mvn.w	r2, #2
 8001e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fa6b 	bl	80022fa <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fa5e 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fa6d 	bl	800230c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d122      	bne.n	8001e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d11b      	bne.n	8001e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0204 	mvn.w	r2, #4
 8001e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fa41 	bl	80022fa <HAL_TIM_IC_CaptureCallback>
 8001e78:	e005      	b.n	8001e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fa34 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fa43 	bl	800230c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d122      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0208 	mvn.w	r2, #8
 8001eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fa17 	bl	80022fa <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fa0a 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fa19 	bl	800230c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d122      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d11b      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0210 	mvn.w	r2, #16
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2208      	movs	r2, #8
 8001f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f9ed 	bl	80022fa <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f9e0 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f9ef 	bl	800230c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10e      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0201 	mvn.w	r2, #1
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f9bb 	bl	80022d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b80      	cmp	r3, #128	; 0x80
 8001f6c:	d10e      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f78:	2b80      	cmp	r3, #128	; 0x80
 8001f7a:	d107      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fcdd 	bl	8002946 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	2b40      	cmp	r3, #64	; 0x40
 8001f98:	d10e      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa4:	2b40      	cmp	r3, #64	; 0x40
 8001fa6:	d107      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f9b3 	bl	800231e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0220 	mvn.w	r2, #32
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fca8 	bl	8002934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002002:	2302      	movs	r3, #2
 8002004:	e0ac      	b.n	8002160 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0c      	cmp	r3, #12
 8002012:	f200 809f 	bhi.w	8002154 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002016:	a201      	add	r2, pc, #4	; (adr r2, 800201c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	08002051 	.word	0x08002051
 8002020:	08002155 	.word	0x08002155
 8002024:	08002155 	.word	0x08002155
 8002028:	08002155 	.word	0x08002155
 800202c:	08002091 	.word	0x08002091
 8002030:	08002155 	.word	0x08002155
 8002034:	08002155 	.word	0x08002155
 8002038:	08002155 	.word	0x08002155
 800203c:	080020d3 	.word	0x080020d3
 8002040:	08002155 	.word	0x08002155
 8002044:	08002155 	.word	0x08002155
 8002048:	08002155 	.word	0x08002155
 800204c:	08002113 	.word	0x08002113
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f9cc 	bl	80023f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0208 	orr.w	r2, r2, #8
 800206a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699a      	ldr	r2, [r3, #24]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0204 	bic.w	r2, r2, #4
 800207a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6999      	ldr	r1, [r3, #24]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	619a      	str	r2, [r3, #24]
      break;
 800208e:	e062      	b.n	8002156 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fa12 	bl	80024c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6999      	ldr	r1, [r3, #24]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	021a      	lsls	r2, r3, #8
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	619a      	str	r2, [r3, #24]
      break;
 80020d0:	e041      	b.n	8002156 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fa5b 	bl	8002594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0208 	orr.w	r2, r2, #8
 80020ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69da      	ldr	r2, [r3, #28]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0204 	bic.w	r2, r2, #4
 80020fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69d9      	ldr	r1, [r3, #28]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	61da      	str	r2, [r3, #28]
      break;
 8002110:	e021      	b.n	8002156 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 faa5 	bl	8002668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69da      	ldr	r2, [r3, #28]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800212c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	69d9      	ldr	r1, [r3, #28]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	021a      	lsls	r2, r3, #8
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	61da      	str	r2, [r3, #28]
      break;
 8002152:	e000      	b.n	8002156 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002154:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_TIM_ConfigClockSource+0x18>
 800217c:	2302      	movs	r3, #2
 800217e:	e0a6      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x166>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800219e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b40      	cmp	r3, #64	; 0x40
 80021b6:	d067      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x120>
 80021b8:	2b40      	cmp	r3, #64	; 0x40
 80021ba:	d80b      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x6c>
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d073      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x140>
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d802      	bhi.n	80021ca <HAL_TIM_ConfigClockSource+0x62>
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d06f      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021c8:	e078      	b.n	80022bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d06c      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x140>
 80021ce:	2b30      	cmp	r3, #48	; 0x30
 80021d0:	d06a      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80021d2:	e073      	b.n	80022bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021d4:	2b70      	cmp	r3, #112	; 0x70
 80021d6:	d00d      	beq.n	80021f4 <HAL_TIM_ConfigClockSource+0x8c>
 80021d8:	2b70      	cmp	r3, #112	; 0x70
 80021da:	d804      	bhi.n	80021e6 <HAL_TIM_ConfigClockSource+0x7e>
 80021dc:	2b50      	cmp	r3, #80	; 0x50
 80021de:	d033      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0xe0>
 80021e0:	2b60      	cmp	r3, #96	; 0x60
 80021e2:	d041      	beq.n	8002268 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80021e4:	e06a      	b.n	80022bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ea:	d066      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x152>
 80021ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f0:	d017      	beq.n	8002222 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80021f2:	e063      	b.n	80022bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f000 faf5 	bl	80027f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002216:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	609a      	str	r2, [r3, #8]
      break;
 8002220:	e04c      	b.n	80022bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6899      	ldr	r1, [r3, #8]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f000 fade 	bl	80027f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002244:	609a      	str	r2, [r3, #8]
      break;
 8002246:	e039      	b.n	80022bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	461a      	mov	r2, r3
 8002256:	f000 fa55 	bl	8002704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2150      	movs	r1, #80	; 0x50
 8002260:	4618      	mov	r0, r3
 8002262:	f000 faac 	bl	80027be <TIM_ITRx_SetConfig>
      break;
 8002266:	e029      	b.n	80022bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	461a      	mov	r2, r3
 8002276:	f000 fa73 	bl	8002760 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2160      	movs	r1, #96	; 0x60
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fa9c 	bl	80027be <TIM_ITRx_SetConfig>
      break;
 8002286:	e019      	b.n	80022bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	461a      	mov	r2, r3
 8002296:	f000 fa35 	bl	8002704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2140      	movs	r1, #64	; 0x40
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fa8c 	bl	80027be <TIM_ITRx_SetConfig>
      break;
 80022a6:	e009      	b.n	80022bc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f000 fa83 	bl	80027be <TIM_ITRx_SetConfig>
        break;
 80022b8:	e000      	b.n	80022bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80022ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a29      	ldr	r2, [pc, #164]	; (80023e8 <TIM_Base_SetConfig+0xb8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00b      	beq.n	8002360 <TIM_Base_SetConfig+0x30>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234e:	d007      	beq.n	8002360 <TIM_Base_SetConfig+0x30>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a26      	ldr	r2, [pc, #152]	; (80023ec <TIM_Base_SetConfig+0xbc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d003      	beq.n	8002360 <TIM_Base_SetConfig+0x30>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a25      	ldr	r2, [pc, #148]	; (80023f0 <TIM_Base_SetConfig+0xc0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d108      	bne.n	8002372 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <TIM_Base_SetConfig+0xb8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00b      	beq.n	8002392 <TIM_Base_SetConfig+0x62>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	d007      	beq.n	8002392 <TIM_Base_SetConfig+0x62>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a19      	ldr	r2, [pc, #100]	; (80023ec <TIM_Base_SetConfig+0xbc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d003      	beq.n	8002392 <TIM_Base_SetConfig+0x62>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a18      	ldr	r2, [pc, #96]	; (80023f0 <TIM_Base_SetConfig+0xc0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d108      	bne.n	80023a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <TIM_Base_SetConfig+0xb8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d103      	bne.n	80023d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	615a      	str	r2, [r3, #20]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40012c00 	.word	0x40012c00
 80023ec:	40000400 	.word	0x40000400
 80023f0:	40000800 	.word	0x40000800

080023f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	f023 0201 	bic.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f023 0302 	bic.w	r3, r3, #2
 800243c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <TIM_OC1_SetConfig+0xc8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d10c      	bne.n	800246a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f023 0308 	bic.w	r3, r3, #8
 8002456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a13      	ldr	r2, [pc, #76]	; (80024bc <TIM_OC1_SetConfig+0xc8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d111      	bne.n	8002496 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	621a      	str	r2, [r3, #32]
}
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40012c00 	.word	0x40012c00

080024c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f023 0210 	bic.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 0320 	bic.w	r3, r3, #32
 800250a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <TIM_OC2_SetConfig+0xd0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d10d      	bne.n	800253c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800253a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a14      	ldr	r2, [pc, #80]	; (8002590 <TIM_OC2_SetConfig+0xd0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d113      	bne.n	800256c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800254a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	621a      	str	r2, [r3, #32]
}
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	40012c00 	.word	0x40012c00

08002594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <TIM_OC3_SetConfig+0xd0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10d      	bne.n	800260e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800260c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a14      	ldr	r2, [pc, #80]	; (8002664 <TIM_OC3_SetConfig+0xd0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d113      	bne.n	800263e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800261c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	621a      	str	r2, [r3, #32]
}
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40012c00 	.word	0x40012c00

08002668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	031b      	lsls	r3, r3, #12
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <TIM_OC4_SetConfig+0x98>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d109      	bne.n	80026dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	019b      	lsls	r3, r3, #6
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	621a      	str	r2, [r3, #32]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	40012c00 	.word	0x40012c00

08002704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f023 0201 	bic.w	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 030a 	bic.w	r3, r3, #10
 8002740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	621a      	str	r2, [r3, #32]
}
 8002756:	bf00      	nop
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f023 0210 	bic.w	r2, r3, #16
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800278a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	031b      	lsls	r3, r3, #12
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800279c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	621a      	str	r2, [r3, #32]
}
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	f043 0307 	orr.w	r3, r3, #7
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	609a      	str	r2, [r3, #8]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b087      	sub	sp, #28
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	021a      	lsls	r2, r3, #8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	431a      	orrs	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	609a      	str	r2, [r3, #8]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	2201      	movs	r2, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1a      	ldr	r2, [r3, #32]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	621a      	str	r2, [r3, #32]
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800288c:	2302      	movs	r3, #2
 800288e:	e046      	b.n	800291e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a16      	ldr	r2, [pc, #88]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d009      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10c      	bne.n	800290c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	4313      	orrs	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40000800 	.word	0x40000800

08002934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e03f      	b.n	80029ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fd ffd2 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800299a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fbd7 	bl	8003150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b08a      	sub	sp, #40	; 0x28
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d17c      	bne.n	8002b0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_UART_Transmit+0x2c>
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e075      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Transmit+0x3e>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e06e      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2221      	movs	r2, #33	; 0x21
 8002a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a46:	f7fe f8ef 	bl	8000c28 <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a60:	d108      	bne.n	8002a74 <HAL_UART_Transmit+0x82>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e003      	b.n	8002a7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002a84:	e02a      	b.n	8002adc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f9fa 	bl	8002e8a <UART_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e036      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3302      	adds	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	e007      	b.n	8002ace <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1cf      	bne.n	8002a86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f9ca 	bl	8002e8a <UART_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e006      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b08a      	sub	sp, #40	; 0x28
 8002b1a:	af02      	add	r7, sp, #8
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	4613      	mov	r3, r2
 8002b24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	f040 8089 	bne.w	8002c4a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_UART_Receive+0x2e>
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e081      	b.n	8002c4c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_UART_Receive+0x40>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e07a      	b.n	8002c4c <HAL_UART_Receive+0x136>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2222      	movs	r2, #34	; 0x22
 8002b68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe f85c 	bl	8000c28 <HAL_GetTick>
 8002b70:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	88fa      	ldrh	r2, [r7, #6]
 8002b76:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	88fa      	ldrh	r2, [r7, #6]
 8002b7c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b86:	d108      	bne.n	8002b9a <HAL_UART_Receive+0x84>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d104      	bne.n	8002b9a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	e003      	b.n	8002ba2 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002baa:	e043      	b.n	8002c34 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2120      	movs	r1, #32
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f967 	bl	8002e8a <UART_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e042      	b.n	8002c4c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10c      	bne.n	8002be6 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	3302      	adds	r3, #2
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	e01f      	b.n	8002c26 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bee:	d007      	beq.n	8002c00 <HAL_UART_Receive+0xea>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <HAL_UART_Receive+0xf8>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e008      	b.n	8002c20 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	3301      	adds	r3, #1
 8002c24:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1b6      	bne.n	8002bac <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10d      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x52>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f9d5 	bl	800304e <UART_Receive_IT>
      return;
 8002ca4:	e0d1      	b.n	8002e4a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80b0 	beq.w	8002e0e <HAL_UART_IRQHandler+0x1ba>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <HAL_UART_IRQHandler+0x70>
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80a5 	beq.w	8002e0e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_UART_IRQHandler+0x90>
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	f043 0201 	orr.w	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_UART_IRQHandler+0xb0>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	f043 0202 	orr.w	r2, r3, #2
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_UART_IRQHandler+0xd0>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	f043 0204 	orr.w	r2, r3, #4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00f      	beq.n	8002d4e <HAL_UART_IRQHandler+0xfa>
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <HAL_UART_IRQHandler+0xee>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	f043 0208 	orr.w	r2, r3, #8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d078      	beq.n	8002e48 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <HAL_UART_IRQHandler+0x11c>
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f96f 	bl	800304e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <HAL_UART_IRQHandler+0x144>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d031      	beq.n	8002dfc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f8c0 	bl	8002f1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d023      	beq.n	8002df4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d013      	beq.n	8002dec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc8:	4a21      	ldr	r2, [pc, #132]	; (8002e50 <HAL_UART_IRQHandler+0x1fc>)
 8002dca:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe f863 	bl	8000e9c <HAL_DMA_Abort_IT>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d016      	beq.n	8002e0a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002de6:	4610      	mov	r0, r2
 8002de8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dea:	e00e      	b.n	8002e0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f843 	bl	8002e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df2:	e00a      	b.n	8002e0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f83f 	bl	8002e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfa:	e006      	b.n	8002e0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f83b 	bl	8002e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002e08:	e01e      	b.n	8002e48 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0a:	bf00      	nop
    return;
 8002e0c:	e01c      	b.n	8002e48 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_UART_IRQHandler+0x1d6>
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f8ac 	bl	8002f80 <UART_Transmit_IT>
    return;
 8002e28:	e00f      	b.n	8002e4a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_UART_IRQHandler+0x1f6>
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f8ed 	bl	800301e <UART_EndTransmit_IT>
    return;
 8002e44:	bf00      	nop
 8002e46:	e000      	b.n	8002e4a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002e48:	bf00      	nop
  }
}
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	08002f59 	.word	0x08002f59

08002e54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	4613      	mov	r3, r2
 8002e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9a:	e02c      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d028      	beq.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <UART_WaitOnFlagUntilTimeout+0x30>
 8002eaa:	f7fd febd 	bl	8000c28 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d21d      	bcs.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ec8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e00f      	b.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4013      	ands	r3, r2
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d0c3      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f34:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0201 	bic.w	r2, r2, #1
 8002f44:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff ff80 	bl	8002e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b21      	cmp	r3, #33	; 0x21
 8002f92:	d13e      	bne.n	8003012 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9c:	d114      	bne.n	8002fc8 <UART_Transmit_IT+0x48>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d110      	bne.n	8002fc8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	1c9a      	adds	r2, r3, #2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	621a      	str	r2, [r3, #32]
 8002fc6:	e008      	b.n	8002fda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	1c59      	adds	r1, r3, #1
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6211      	str	r1, [r2, #32]
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ffc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800300c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003034:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ff08 	bl	8002e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b22      	cmp	r3, #34	; 0x22
 8003060:	d170      	bne.n	8003144 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306a:	d117      	bne.n	800309c <UART_Receive_IT+0x4e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d113      	bne.n	800309c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	b29b      	uxth	r3, r3
 8003086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308a:	b29a      	uxth	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	1c9a      	adds	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
 800309a:	e026      	b.n	80030ea <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ae:	d007      	beq.n	80030c0 <UART_Receive_IT+0x72>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <UART_Receive_IT+0x80>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	e008      	b.n	80030e0 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4619      	mov	r1, r3
 80030f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d120      	bne.n	8003140 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0220 	bic.w	r2, r2, #32
 800310c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800311c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff fe95 	bl	8002e66 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e002      	b.n	8003146 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e000      	b.n	8003146 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800318a:	f023 030c 	bic.w	r3, r3, #12
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	430b      	orrs	r3, r1
 8003196:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a2c      	ldr	r2, [pc, #176]	; (8003264 <UART_SetConfig+0x114>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d103      	bne.n	80031c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031b8:	f7fe fc42 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	e002      	b.n	80031c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031c0:	f7fe fc2a 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 80031c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	009a      	lsls	r2, r3, #2
 80031d0:	441a      	add	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	4a22      	ldr	r2, [pc, #136]	; (8003268 <UART_SetConfig+0x118>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	0119      	lsls	r1, r3, #4
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	441a      	add	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <UART_SetConfig+0x118>)
 80031fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2064      	movs	r0, #100	; 0x64
 8003206:	fb00 f303 	mul.w	r3, r0, r3
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	3332      	adds	r3, #50	; 0x32
 8003210:	4a15      	ldr	r2, [pc, #84]	; (8003268 <UART_SetConfig+0x118>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321c:	4419      	add	r1, r3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	009a      	lsls	r2, r3, #2
 8003228:	441a      	add	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	fbb2 f2f3 	udiv	r2, r2, r3
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <UART_SetConfig+0x118>)
 8003236:	fba3 0302 	umull	r0, r3, r3, r2
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2064      	movs	r0, #100	; 0x64
 800323e:	fb00 f303 	mul.w	r3, r0, r3
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	3332      	adds	r3, #50	; 0x32
 8003248:	4a07      	ldr	r2, [pc, #28]	; (8003268 <UART_SetConfig+0x118>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	f003 020f 	and.w	r2, r3, #15
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	440a      	add	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40013800 	.word	0x40013800
 8003268:	51eb851f 	.word	0x51eb851f

0800326c <atoi>:
 800326c:	220a      	movs	r2, #10
 800326e:	2100      	movs	r1, #0
 8003270:	f000 b8a8 	b.w	80033c4 <strtol>

08003274 <__libc_init_array>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	2500      	movs	r5, #0
 8003278:	4e0c      	ldr	r6, [pc, #48]	; (80032ac <__libc_init_array+0x38>)
 800327a:	4c0d      	ldr	r4, [pc, #52]	; (80032b0 <__libc_init_array+0x3c>)
 800327c:	1ba4      	subs	r4, r4, r6
 800327e:	10a4      	asrs	r4, r4, #2
 8003280:	42a5      	cmp	r5, r4
 8003282:	d109      	bne.n	8003298 <__libc_init_array+0x24>
 8003284:	f000 f8d6 	bl	8003434 <_init>
 8003288:	2500      	movs	r5, #0
 800328a:	4e0a      	ldr	r6, [pc, #40]	; (80032b4 <__libc_init_array+0x40>)
 800328c:	4c0a      	ldr	r4, [pc, #40]	; (80032b8 <__libc_init_array+0x44>)
 800328e:	1ba4      	subs	r4, r4, r6
 8003290:	10a4      	asrs	r4, r4, #2
 8003292:	42a5      	cmp	r5, r4
 8003294:	d105      	bne.n	80032a2 <__libc_init_array+0x2e>
 8003296:	bd70      	pop	{r4, r5, r6, pc}
 8003298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800329c:	4798      	blx	r3
 800329e:	3501      	adds	r5, #1
 80032a0:	e7ee      	b.n	8003280 <__libc_init_array+0xc>
 80032a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032a6:	4798      	blx	r3
 80032a8:	3501      	adds	r5, #1
 80032aa:	e7f2      	b.n	8003292 <__libc_init_array+0x1e>
 80032ac:	08003638 	.word	0x08003638
 80032b0:	08003638 	.word	0x08003638
 80032b4:	08003638 	.word	0x08003638
 80032b8:	0800363c 	.word	0x0800363c

080032bc <memset>:
 80032bc:	4603      	mov	r3, r0
 80032be:	4402      	add	r2, r0
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d100      	bne.n	80032c6 <memset+0xa>
 80032c4:	4770      	bx	lr
 80032c6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ca:	e7f9      	b.n	80032c0 <memset+0x4>

080032cc <_strtol_l.isra.0>:
 80032cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032d0:	4680      	mov	r8, r0
 80032d2:	4689      	mov	r9, r1
 80032d4:	4692      	mov	sl, r2
 80032d6:	461e      	mov	r6, r3
 80032d8:	460f      	mov	r7, r1
 80032da:	463d      	mov	r5, r7
 80032dc:	9808      	ldr	r0, [sp, #32]
 80032de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80032e2:	f000 f885 	bl	80033f0 <__locale_ctype_ptr_l>
 80032e6:	4420      	add	r0, r4
 80032e8:	7843      	ldrb	r3, [r0, #1]
 80032ea:	f013 0308 	ands.w	r3, r3, #8
 80032ee:	d132      	bne.n	8003356 <_strtol_l.isra.0+0x8a>
 80032f0:	2c2d      	cmp	r4, #45	; 0x2d
 80032f2:	d132      	bne.n	800335a <_strtol_l.isra.0+0x8e>
 80032f4:	2201      	movs	r2, #1
 80032f6:	787c      	ldrb	r4, [r7, #1]
 80032f8:	1cbd      	adds	r5, r7, #2
 80032fa:	2e00      	cmp	r6, #0
 80032fc:	d05d      	beq.n	80033ba <_strtol_l.isra.0+0xee>
 80032fe:	2e10      	cmp	r6, #16
 8003300:	d109      	bne.n	8003316 <_strtol_l.isra.0+0x4a>
 8003302:	2c30      	cmp	r4, #48	; 0x30
 8003304:	d107      	bne.n	8003316 <_strtol_l.isra.0+0x4a>
 8003306:	782b      	ldrb	r3, [r5, #0]
 8003308:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800330c:	2b58      	cmp	r3, #88	; 0x58
 800330e:	d14f      	bne.n	80033b0 <_strtol_l.isra.0+0xe4>
 8003310:	2610      	movs	r6, #16
 8003312:	786c      	ldrb	r4, [r5, #1]
 8003314:	3502      	adds	r5, #2
 8003316:	2a00      	cmp	r2, #0
 8003318:	bf14      	ite	ne
 800331a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800331e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003322:	2700      	movs	r7, #0
 8003324:	fbb1 fcf6 	udiv	ip, r1, r6
 8003328:	4638      	mov	r0, r7
 800332a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800332e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003332:	2b09      	cmp	r3, #9
 8003334:	d817      	bhi.n	8003366 <_strtol_l.isra.0+0x9a>
 8003336:	461c      	mov	r4, r3
 8003338:	42a6      	cmp	r6, r4
 800333a:	dd23      	ble.n	8003384 <_strtol_l.isra.0+0xb8>
 800333c:	1c7b      	adds	r3, r7, #1
 800333e:	d007      	beq.n	8003350 <_strtol_l.isra.0+0x84>
 8003340:	4584      	cmp	ip, r0
 8003342:	d31c      	bcc.n	800337e <_strtol_l.isra.0+0xb2>
 8003344:	d101      	bne.n	800334a <_strtol_l.isra.0+0x7e>
 8003346:	45a6      	cmp	lr, r4
 8003348:	db19      	blt.n	800337e <_strtol_l.isra.0+0xb2>
 800334a:	2701      	movs	r7, #1
 800334c:	fb00 4006 	mla	r0, r0, r6, r4
 8003350:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003354:	e7eb      	b.n	800332e <_strtol_l.isra.0+0x62>
 8003356:	462f      	mov	r7, r5
 8003358:	e7bf      	b.n	80032da <_strtol_l.isra.0+0xe>
 800335a:	2c2b      	cmp	r4, #43	; 0x2b
 800335c:	bf04      	itt	eq
 800335e:	1cbd      	addeq	r5, r7, #2
 8003360:	787c      	ldrbeq	r4, [r7, #1]
 8003362:	461a      	mov	r2, r3
 8003364:	e7c9      	b.n	80032fa <_strtol_l.isra.0+0x2e>
 8003366:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800336a:	2b19      	cmp	r3, #25
 800336c:	d801      	bhi.n	8003372 <_strtol_l.isra.0+0xa6>
 800336e:	3c37      	subs	r4, #55	; 0x37
 8003370:	e7e2      	b.n	8003338 <_strtol_l.isra.0+0x6c>
 8003372:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003376:	2b19      	cmp	r3, #25
 8003378:	d804      	bhi.n	8003384 <_strtol_l.isra.0+0xb8>
 800337a:	3c57      	subs	r4, #87	; 0x57
 800337c:	e7dc      	b.n	8003338 <_strtol_l.isra.0+0x6c>
 800337e:	f04f 37ff 	mov.w	r7, #4294967295
 8003382:	e7e5      	b.n	8003350 <_strtol_l.isra.0+0x84>
 8003384:	1c7b      	adds	r3, r7, #1
 8003386:	d108      	bne.n	800339a <_strtol_l.isra.0+0xce>
 8003388:	2322      	movs	r3, #34	; 0x22
 800338a:	4608      	mov	r0, r1
 800338c:	f8c8 3000 	str.w	r3, [r8]
 8003390:	f1ba 0f00 	cmp.w	sl, #0
 8003394:	d107      	bne.n	80033a6 <_strtol_l.isra.0+0xda>
 8003396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339a:	b102      	cbz	r2, 800339e <_strtol_l.isra.0+0xd2>
 800339c:	4240      	negs	r0, r0
 800339e:	f1ba 0f00 	cmp.w	sl, #0
 80033a2:	d0f8      	beq.n	8003396 <_strtol_l.isra.0+0xca>
 80033a4:	b10f      	cbz	r7, 80033aa <_strtol_l.isra.0+0xde>
 80033a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80033aa:	f8ca 9000 	str.w	r9, [sl]
 80033ae:	e7f2      	b.n	8003396 <_strtol_l.isra.0+0xca>
 80033b0:	2430      	movs	r4, #48	; 0x30
 80033b2:	2e00      	cmp	r6, #0
 80033b4:	d1af      	bne.n	8003316 <_strtol_l.isra.0+0x4a>
 80033b6:	2608      	movs	r6, #8
 80033b8:	e7ad      	b.n	8003316 <_strtol_l.isra.0+0x4a>
 80033ba:	2c30      	cmp	r4, #48	; 0x30
 80033bc:	d0a3      	beq.n	8003306 <_strtol_l.isra.0+0x3a>
 80033be:	260a      	movs	r6, #10
 80033c0:	e7a9      	b.n	8003316 <_strtol_l.isra.0+0x4a>
	...

080033c4 <strtol>:
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <strtol+0x24>)
 80033c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033c8:	681c      	ldr	r4, [r3, #0]
 80033ca:	4d08      	ldr	r5, [pc, #32]	; (80033ec <strtol+0x28>)
 80033cc:	6a23      	ldr	r3, [r4, #32]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bf08      	it	eq
 80033d2:	462b      	moveq	r3, r5
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	460a      	mov	r2, r1
 80033da:	4601      	mov	r1, r0
 80033dc:	4620      	mov	r0, r4
 80033de:	f7ff ff75 	bl	80032cc <_strtol_l.isra.0>
 80033e2:	b003      	add	sp, #12
 80033e4:	bd30      	pop	{r4, r5, pc}
 80033e6:	bf00      	nop
 80033e8:	2000000c 	.word	0x2000000c
 80033ec:	20000070 	.word	0x20000070

080033f0 <__locale_ctype_ptr_l>:
 80033f0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80033f4:	4770      	bx	lr

080033f6 <__ascii_mbtowc>:
 80033f6:	b082      	sub	sp, #8
 80033f8:	b901      	cbnz	r1, 80033fc <__ascii_mbtowc+0x6>
 80033fa:	a901      	add	r1, sp, #4
 80033fc:	b142      	cbz	r2, 8003410 <__ascii_mbtowc+0x1a>
 80033fe:	b14b      	cbz	r3, 8003414 <__ascii_mbtowc+0x1e>
 8003400:	7813      	ldrb	r3, [r2, #0]
 8003402:	600b      	str	r3, [r1, #0]
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	1c10      	adds	r0, r2, #0
 8003408:	bf18      	it	ne
 800340a:	2001      	movne	r0, #1
 800340c:	b002      	add	sp, #8
 800340e:	4770      	bx	lr
 8003410:	4610      	mov	r0, r2
 8003412:	e7fb      	b.n	800340c <__ascii_mbtowc+0x16>
 8003414:	f06f 0001 	mvn.w	r0, #1
 8003418:	e7f8      	b.n	800340c <__ascii_mbtowc+0x16>

0800341a <__ascii_wctomb>:
 800341a:	b149      	cbz	r1, 8003430 <__ascii_wctomb+0x16>
 800341c:	2aff      	cmp	r2, #255	; 0xff
 800341e:	bf8b      	itete	hi
 8003420:	238a      	movhi	r3, #138	; 0x8a
 8003422:	700a      	strbls	r2, [r1, #0]
 8003424:	6003      	strhi	r3, [r0, #0]
 8003426:	2001      	movls	r0, #1
 8003428:	bf88      	it	hi
 800342a:	f04f 30ff 	movhi.w	r0, #4294967295
 800342e:	4770      	bx	lr
 8003430:	4608      	mov	r0, r1
 8003432:	4770      	bx	lr

08003434 <_init>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr

08003440 <_fini>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	bf00      	nop
 8003444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003446:	bc08      	pop	{r3}
 8003448:	469e      	mov	lr, r3
 800344a:	4770      	bx	lr
